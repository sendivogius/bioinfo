import unittest
import sequencing

class SequencingTests(unittest.TestCase):
    def test_composition(self):
        pattern = 'TATGGGGTGC'
        k = 3
        expected = ['ATG', 'GGG', 'GGG', 'GGT', 'GTG', 'TAT', 'TGC', 'TGG']
        self.assertEqual(expected, sequencing.composition(pattern, k))


    def test_composition1(self):
        pattern = 'ATAGCCAACATGGGCGGTTACGAAATGATGCGCTTTTACATCCCAAATCAGATATGGCCCCGAAGGGCTAGTCTCAAACGGAGAATTGCACTTACTGGTCCCGGACGGCTACCTCCATAGAACTCTAATCTTCCCCTAGTAGGGTATGGAGGTATAAGGATGTCTGTGTTTAGTAGTGGTTTCTAGGTACACATCAAGGCGTGGGACCGCCGCGACTTTCACCTCCAAAAAGCATGAAGGGTTTGTCTAACCGCTGAGGGTATAATACAGTCATCTGCTGGCCGAGCCGATCTACGTCAATGATTACTATAAGTTGAACAGGAATTCAGATGCTGCAGGCCGGGGGTATACGCCCTTAATATGATACAGCAGATCTGCTTAGAAGCACTGACTAGGGTGTGCACACAAAGTTATTGGACTCGTATGGGCCTTTCCCTTCGCGTTGGGTTATCGGGGGTTTGAGATCTCGGGAACATGAAAGCTGGAGAGTCCGTTTACGCGCTCGGCCGGTACGGCCGTCTAATGGTGGTAGTGGGGAGCGACGGCCAAATGATACCGCCCTGGATGACGAGTAATGTATCCGCTTAACTAGGTATGAAGTACTAACGATCAGGACGGGCATCGGGACTGATAGGCACGAAAGTTCATCGGGGTTCGGTGCGGTATTTTCGGACTGTTCAGTTGCAGGATGTTCCGAAGATCATTGATTTGATATCATCCCTGTAGCTATATACCGGCAAATGTCTTGTGACTCAAGCTTGTTTAGGAAAATCTAGAATGGTTCAAATTGGCTGAACGTCCACTCAACGCCCGTTGCTGCGTTCGTCGGTTAAGTCGACTATTAAACCATAGTCCAAGTTACCGACATCCGTTCATGGATACAACCGAGTCATTACTTGCCACTATCAAACCAAACGGTAACATTCAGGCTATTCATTGGGGGGGATGCTATCGCGCAAAAGCATATTGCTCTACCGCAGCACGTATCGTCATCCCGACGCACGAGGTCATGCATCGTAGTCACGTATAACCGCACGATGACATTTATAAGAGGGGATGCGCAATATCGCCAGAGAGGATCAACCTATACGATCGTCATGTGATTAAGAGACATCGTCTAAATATACAACGTTAAGTAACAAGAGGGCAACCCGTTCCGTCAGATGACGCCAATGATACAGGCCTCACCGATTAAGCCGTCGCGCTCGATCGAAGGAAAAAGGTAACGTTTACTGGTCGGCTTCTCATTGAGCCGGGGTGTAAAATTGTAGCCTTTCCAGGCTAACGAAAATGACATGCTTTGAATACGTCCGCTCATGTACGACAGGTCTGAGATAACCCGTTAGACGTTAACATTTGAAGCTTTCAGCTGTTGCAGCACGCCCCCCACTGTAACACTGCGAATCCTCGGATAAAGAGCCAGAGTCAGGGCGCAAATATCTCCCGAGATAATTCGACGGGGCAGGTCACGACAGCCTCGGGCACAGCCTAAGGGCATGGGCCCACGTCACAGATGAGCCCATTGGGCGGGGTTCTGCAGCTATGGGCTCCACTGCGGCCAACGTGCAATCTACGATAACCAGGCGGCCGGGAGTATACGCGCATCTAAAGAATACAGGCCAGGGTCGAAGAGATGCGGTCTCGAAGCATGTCTGTCCATCCTCGGTCCCGCTTTCAGGCTAAAACCCCCGCCCTCTGGTTTATAGTCTTCTAAATTAGCGGTACGCCCCAACAGATTGTGTTTCGGTTTACGTGCACCCATTCCCATCGACAAATATTTAGATAGGAGCGTAGGGATGGAGCCGGGAGTTACGTCCTTTACCTTCTGTGCTTAGCTCGCCATGATATACCAGGAGTGTGGACGGCGATAGCAAGAACGGTCTCTACCAGCTGTATTTCGTCGAGCGTTCACAGAAAATCCGCTGATGGCAGACGTGTGTAATATACCTTGCGCCCAGCTGTGGCTATATACCGTGAAGTAATAAAACAGCAGTGTCTGCACTCACCAGCTTGTGGGCGATCGAGCCCCGAGTTGCAAATAACACGATAACGTCCAATTAACGAGCAACTGACTTTCCCCACGCTAAACTGACGATGGGTATGTTATGGAATCGGATACAATTCGTCTGACTATCCCTGAACACCCTCTTCCCGTGTGGCGCGAGAATCCTGACCATATTCCTCGGGCGGCTTTACCTATATATCATGAAAGATGTGAGGTGGGCAGAGCCCACAAATCGGATTCGCGTTAGTTTTTGCGAATATGGCTATTAGCATGTTATACTGGACATCCAACCTCCGGGCTGGATCTTGGAGTTTGCTTGACAAACCCTCGGACTAGTACGTCGCTTAATGTTTTAGAAATTAAGGAATAAACCGTTTAGCGCAGATACTAGACCATCAGGATCCTGATGGCCTCCGAATTGAGCTCGTGGTCTAGCCTGGGACCTCTACCGGGACGTGTGTGCCTTAACACTCTATGCAGTGGGGCGCAGTTCGTATCTTATGGAAATGAGAAAAGGATCCGAAATGCATGCCCCCCAACGGCTATTTAACAAACTCGTAGCGTGTTCGTGTGCTCATAGTCTAATAGCCTCCAATTGTGGTTCCAAAGCTCCTCGAACAAATCACACGTTGCGCTAATATTGGCAAAGTCGTTTGACTAACGGAGGTGGGAGTCCCTATGCACAATCTGCGATAGATCCATGGTTATTAGGGCGAGAGTATTCGTACGGTCAGCGCGGAGATCGGGTATGGTGGAGTGGACCGTCTAGATATGATTTATCTATTCCATACCGTGGCTTGAGCTCTCGAGACTGAGACCGTTAACGATGCCAGGTAGGCAACTGTGGGGCACTACTTAGGAAGGGTCATTTTGTAAACCGATAGGTGTACCTCATATCTTGTCTAGAAACTAGCAGTAATGTGGATGTTGGTTAAATACAGCGTCGATCCCTTATTTGAAGGAATCAATCACCTCTGTGTGAATTAAAAATGTGCGAAAGCTCGTTATCCGCTCAGCCTGCTTGGGCAGCCTCATCTGTGGGACAGCTTACCCTTCCTTTCCCTTGCACTGGCGTTGTCGTAACCAAGGAGCTTTGATAATAGTACGGGGACGTCGGTTACAAGTCGACCGATATGCCCCGTTGGACCCTTACACACGGTTCGTGACGCCCACATCCGGTTCGACCTGGCGCAAGCTGAGATGAGTTTTCCAGCCCCTATGGGTCAGGTCCCCACCTACCTGGAGTCCCGTAAGGCTGCTCTAGATATTATAAGGGCCGACAAGACCGCCCTCCGTCTTCCAAAGAACCACCCTTACAATTATGATCAAGATCATGAAGAAAGGAGGGTTGTTGGTTTCTTTACACTTGAAGGGGAATCTTCTGTCAAAAGACATAGGTACCCCCGCTCCAGCCTGTGTTCCTCATGACCCTTGACTCACTTGTGGCCCGGACACTAGAGCACTTAGTAAGGTTCGGCATAGGATCCTGCTTAAACGTCCGATATGATGGAGCGTCGCCCCTCTCCTGTGTCGGCTAGCGATCCCTATGTCTGAAACAATTTGGGCGGATGTGAACAGACGGTACTCCCTTCTATGGCGTACCCAACAATGGGTAAGGGACCGCGTGGAATCTGTCGCTTGTTAGCAACGTTGATGAATCAGTGCGCAGGTCATCCATAGGGCTCACTTGTTCATTCCCGGTCTGCGGGCACCTCGCGTTCCAATTTATGGAAATGCCGTTGTTTTAGGAACAGAGGAATCGAGTACCGGGCGCCCCATCCGTTGCGCGAAACGGGGGCGCCCTCCTGGCCGTGCCCCAGTGCCCCTAACTAAATAGACTTGTCCATTCTAAGCCAGGCATGGACGAAGCTACACCTTCATAATTAACCAGAGACAGACCCTGTTCCAGGCGATAGCTCACACTTCGGACCCCTGGGGGGGGCGGCGGGGGCGCTTAACCGCTCTATGATGGTAGCGCGCATCTCCTGAGCAACAATTCAACTCAAGGACTTACCGTACGTGGATTCATTCTATCCTCATCAATGCGTCGATGATTATATGTTTTGCTCGGCACAGAGAAACGCGAATTCCCATGTTCACGGCAGTGGGCCCTGGTTCCCAGATAGCAAGCGCAACATTACGATTTCACATCCCCGCAACGCTCTGCACACAGTGAAACTCGCGTAAACCGGTGCTACAGTCAATGATGGCTGTAGGGCGTCAGGCAGTAACTCGTGAGATGCGACTTTACGCGTTATACGGCTATATACATGTGCGCGCATAAGGCTTGGGAGGCTTGGGCACGACTCTCAAGAGATTGCCGAGGTGGGGATCTCTGATGTGTTCCAGGGAACGTATTCAAGCAGGTGTGTAAAAGGAATTGAACTTAATGAAGACCCTACGGGTAACGGTCGTAGCGCAACGCTGACAAGCGAAGGCTGTATTATACAAGCATTTCGTCCGTCTTACTGCTACAAGCTAGTGTTCGACAGGACAGCAAAGAGGGAGAACTGTTGGAAGCATGGACGGTCCGAGAAGGGCCGGTTCTCACATGTACTCCTCCCTTACGTGACGGTACAATGCCGCATCAACGCACGTGGACGTATTCTCTTCGGGTCCACATAAAACGTTGGACATGACGCAATTCCGACTGAAAGTGAAGGTGCACTACGGATCTCGTGAAAGAGTACCGTCTCGAGCCCATTAGCATCAAGCTGTAGGCATTCAACCAGCCCGGGTACCTCTCATCGCGCGGTAGGCACGTCAGTTACATCTGCACGTTTGAAAGCTTATCATTGGGTTAAGACCGGGACGTGCTTTGCCGTAGACGAGCCGCTATATGGTACACGGCCTGGTCTAATCGTTCAAGGCCTTCGATCGAGCAGAAAGAGGATGTCTTGAGCGGGATATTATCGCAGAGATCCAAGTTCCGCAGGCCTACCGCCATTCTCAACAGCCTATGTTGTGCTGGGGCTCCTATGCTTTGACAGGATTT'
        k = 100
        expected = ['ATG', 'GGG', 'GGG', 'GGT', 'GTG', 'TAT', 'TGC', 'TGG']
        print(sequencing.composition(pattern, k))
        self.assertEqual(expected, sequencing.composition(pattern, k))

if __name__ == '__main__':
    unittest.main()
