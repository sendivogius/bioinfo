import unittest
from collections import Counter

from baal import aa


class AaTests(unittest.TestCase):
    def test_translation(self):
        dna = 'AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'
        expected = 'MAMAPRTEINSTRING'
        self.assertEqual(expected, aa.translate(dna))

    def test_reverse_translation(self):
        aa_str = 'MS'
        expected = {
            'AUGAGU',
            'AUGAGC',
            'AUGUCA',
            'AUGUCC',
            'AUGUCG',
            'AUGUCU'
        }
        self.assertEqual(expected, aa.reverse_translate(aa_str))

    def test_get_econdings(self):
        dna = 'ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA'
        aa_str = 'MA'
        expected = [
            'ATGGCC',
            'GGCCAT',
            'ATGGCC',
        ]
        self.assertEqual(sorted(expected), sorted(aa.get_encodings(dna, aa_str)))

    def test_peptide_mass_str(self):
        aa_str = 'NQE'
        expected = 371
        self.assertEqual(expected, aa.get_peptide_mass(aa_str))

    def test_peptide_mass_empty_str(self):
        aa_str = ''
        expected = 0
        self.assertEqual(expected, aa.get_peptide_mass(aa_str))

    def test_peptide_mass_tuple(self):
        mass_tuple = (128, 129, 114)
        expected = 371
        self.assertEqual(expected, aa.get_peptide_mass(mass_tuple))

    def test_peptide_mass_empty(self):
        mass_tuple = ()
        expected = 0
        self.assertEqual(expected, aa.get_peptide_mass(mass_tuple))

    def test_aa_spectrum_cyclic_str(self):
        aa_str = 'LEQN'
        expected = Counter([0, 113, 114, 128, 129, 227, 242, 242, 257, 355, 356, 370, 371, 484])
        self.assertEqual(expected, aa.theoretical_spectrum(aa_str, cyclic=True))

    def test_aa_spectrum_linear_str(self):
        aa_str = 'LEQN'
        expected = Counter([113, 129, 128, 114, 242, 257, 242, 370, 371, 0, 484])
        self.assertEqual(expected, aa.theoretical_spectrum(aa_str, cyclic=False))

    def test_aa_spectrum_cyclic_tuple(self):
        mass_tuple = (113, 129, 128, 114)
        expected = Counter([0, 113, 114, 128, 129, 227, 242, 242, 257, 355, 356, 370, 371, 484])
        self.assertEqual(expected, aa.theoretical_spectrum(mass_tuple, cyclic=True))

    def test_aa_spectrum_linear_tuple(self):
        mass_tuple = (113, 129, 128, 114)
        expected = Counter([113, 129, 128, 114, 242, 257, 242, 370, 371, 0, 484])
        self.assertEqual(expected, aa.theoretical_spectrum(mass_tuple, cyclic=False))

    def test_parent_mass(self):
        spectrum = Counter([0, 113, 114, 128, 129, 227, 242, 242, 257, 355, 356, 370, 371, 484])
        expected = 484
        self.assertEqual(expected, aa.get_parent_mass(spectrum))

    def test_expand_peptides_empty(self):
        peptides = {()}
        expected = {(57,), (71,), (87,), (97,), (99,), (101,), (103,), (113,), (114,), (115,), (128,), (129,), (131,),
                    (137,), (147,), (156,), (163,), (186,), }
        self.assertEqual(expected, aa.expand_peptides(peptides))

    def test_expand_peptides(self):
        peptides = {(71,), (115, 115)}
        expected = {(71, 57), (71, 71), (71, 87), (71, 97), (71, 99), (71, 101), (71, 103), (71, 113), (71, 114),
                    (71, 115), (71, 128), (71, 129), (71, 131), (71, 137), (71, 147), (71, 156), (71, 163), (71, 186),
                    (115, 115, 57), (115, 115, 71), (115, 115, 87), (115, 115, 97), (115, 115, 99), (115, 115, 101),
                    (115, 115, 103), (115, 115, 113), (115, 115, 114), (115, 115, 115), (115, 115, 128),
                    (115, 115, 129), (115, 115, 131), (115, 115, 137), (115, 115, 147), (115, 115, 156),
                    (115, 115, 186), (115, 115, 163), }
        self.assertEqual(expected, aa.expand_peptides(peptides))

    def test_subpeptides_number(self):
        peptide_length = 841
        expected = 112663579
        self.assertEqual(expected, aa.number_of_peptides_with_mass(peptide_length))

    def test_is_not_consistent(self):
        test_peptide = 'VKF'
        test_spec = aa.theoretical_spectrum(test_peptide)
        target_spec = [0, 97, 99, 113, 114, 128, 128, 147, 147, 163, 186, 227, 241, 242, 244, 260, 261, 262, 283, 291,
                       333, 340, 357, 388, 389, 390, 390, 405, 430, 430, 447, 485, 487, 503, 504, 518, 543, 544, 552,
                       575, 577, 584, 631, 632, 650, 651, 671, 672, 690, 691, 738, 745, 747, 770, 778, 779, 804, 818,
                       819, 835, 837, 875, 892, 892, 917, 932, 932, 933, 934, 965, 982, 989, 1031, 1039, 1060, 1061,
                       1062, 1078, 1080, 1081, 1095, 1136, 1159, 1175, 1175, 1194, 1194, 1208, 1209, 1223, 1225, 1322]
        self.assertFalse(aa.is_consistent(test_spec, target_spec))

    def test_is_consistent(self):
        test_peptide = 'VKY'
        test_spec = aa.theoretical_spectrum(test_peptide)
        target_spec = [0, 97, 99, 113, 114, 128, 128, 147, 147, 163, 186, 227, 241, 242, 244, 260, 261, 262, 283, 291,
                       333, 340, 357, 388, 389, 390, 390, 405, 430, 430, 447, 485, 487, 503, 504, 518, 543, 544, 552,
                       575, 577, 584, 631, 632, 650, 651, 671, 672, 690, 691, 738, 745, 747, 770, 778, 779, 804, 818,
                       819, 835, 837, 875, 892, 892, 917, 932, 932, 933, 934, 965, 982, 989, 1031, 1039, 1060, 1061,
                       1062, 1078, 1080, 1081, 1095, 1136, 1159, 1175, 1175, 1194, 1194, 1208, 1209, 1223, 1225, 1322]
        self.assertTrue(aa.is_consistent(test_spec, target_spec))

    def test_mass_string(self):
        peptide = 'IWK'
        expected = '128-111-111'
        self.assertTrue(expected, aa.mass_string(peptide))

    def test_cyclopeptide_sequencing_integers(self):
        spectrum = Counter([0, 113, 128, 186, 241, 299, 314, 427])
        self.assertEqual(
            {(113, 128, 186), (113, 186, 128), (128, 113, 186), (128, 186, 113), (186, 113, 128), (186, 128, 113)},
            aa.cyclopeptide_sequencing(spectrum, integers=True))

    def test_cyclopeptide_sequencing(self):
        spectrum = Counter([0, 113, 128, 186, 241, 299, 314, 427])
        self.assertEqual(
            {'IWQ', 'WQL', 'WKL', 'QWL', 'IQW', 'KLW', 'LWK', 'WQI', 'LWQ', 'WLQ', 'KIW', 'WIQ', 'LKW', 'IKW', 'KWI',
             'WIK', 'LQW', 'QWI', 'IWK', 'KWL', 'QLW', 'WLK', 'WKI', 'QIW'},
            aa.cyclopeptide_sequencing(spectrum, integers=False))

    def test_peptide_score_cyclic(self):
        peptide = 'NQEL'
        spectrum = Counter([0, 99, 113, 114, 128, 227, 257, 299, 355, 356, 370, 371, 484])
        self.assertEqual(11, aa.score_peptide(spectrum, peptide, cyclic=True))

    def test_peptide_score_linear(self):
        peptide = 'MQHQEWNSEITNQTTNAFSEFAHYAGDNSVNYAFNQPNFDDNWECLVT'
        spectrum = Counter([0,57,57,71,71,71,71,87,87,87,87,97,99,99,101,101,101,103,103,103,113,113,114,114,114,114,114,114,114,114,115,115,115,128,128,128,128,129,129,129,129,131,137,137,147,147,147,156,163,172,174,185,186,186,186,186,188,201,201,201,208,211,212,213,214,215,216,216,216,217,218,218,218,225,229,229,232,232,232,234,234,238,242,242,242,243,243,252,257,261,261,262,265,269,272,277,286,300,300,300,300,302,303,305,311,315,315,315,316,316,319,323,323,328,329,330,332,332,332,339,339,343,343,343,345,348,357,358,358,363,365,366,369,372,373,373,376,376,380,381,387,389,390,394,394,403,414,415,418,419,419,426,429,429,430,430,430,434,440,443,443,444,444,444,447,451,453,456,457,460,463,466,472,472,473,479,479,486,486,495,495,495,495,497,497,501,501,506,516,516,518,520,527,529,531,531,532,532,534,537,537,543,544,544,544,548,554,555,557,557,557,559,566,576,577,580,585,586,593,594,600,600,601,607,608,609,609,615,623,626,626,629,630,635,635,642,644,644,645,645,645,647,648,648,651,657,658,658,665,669,671,672,674,680,681,681,683,686,687,690,692,694,696,704,708,713,715,716,720,722,730,735,736,737,738,744,745,747,748,749,750,758,758,762,763,767,770,772,773,773,773,779,781,783,786,789,794,795,795,795,795,798,801,809,812,818,818,818,820,820,829,834,834,836,839,844,847,849,859,859,860,860,860,862,863,863,864,866,870,876,882,885,886,887,887,891,897,904,908,909,909,910,910,910,912,917,923,926,931,932,933,933,935,946,948,950,958,962,965,967,967,969,972,973,974,974,974,976,978,980,981,987,988,999,999,1004,1005,1006,1010,1011,1011,1013,1019,1020,1023,1024,1032,1036,1037,1038,1038,1045,1045,1047,1047,1061,1063,1072,1073,1079,1079,1081,1081,1083,1086,1088,1095,1096,1098,1101,1101,1102,1103,1105,1108,1109,1118,1124,1124,1124,1132,1133,1134,1134,1142,1143,1143,1146,1150,1152,1152,1152,1153,1159,1160,1162,1166,1175,1182,1185,1189,1192,1192,1192,1194,1199,1202,1209,1210,1212,1214,1217,1217,1221,1223,1225,1229,1233,1233,1236,1238,1246,1247,1248,1249,1253,1255,1265,1267,1274,1279,1280,1280,1281,1289,1289,1290,1290,1290,1295,1299,1304,1304,1306,1306,1309,1313,1313,1317,1320,1321,1330,1331,1332,1336,1339,1345,1349,1350,1356,1361,1361,1363,1366,1366,1375,1377,1377,1390,1393,1394,1395,1395,1396,1403,1403,1404,1404,1405,1408,1412,1417,1418,1418,1418,1420,1424,1427,1446,1446,1448,1462,1463,1464,1465,1467,1467,1470,1474,1475,1475,1491,1492,1492,1495,1497,1499,1499,1503,1505,1505,1505,1510,1510,1511,1517,1517,1519,1522,1526,1531,1532,1532,1533,1533,1554,1562,1567,1568,1568,1576,1578,1579,1582,1593,1598,1602,1603,1604,1606,1606,1609,1610,1613,1613,1613,1618,1619,1621,1625,1625,1628,1629,1631,1632,1633,1638,1647,1647,1655,1668,1680,1680,1680,1681,1682,1689,1696,1699,1700,1705,1706,1707,1708,1708,1709,1712,1718,1719,1727,1728,1731,1734,1739,1742,1743,1746,1747,1748,1749,1751,1753,1753,1761,1766,1769,1780,1785,1786,1794,1794,1799,1803,1811,1814,1818,1819,1827,1833,1833,1834,1835,1836,1837,1837,1840,1841,1842,1844,1845,1848,1856,1861,1862,1865,1868,1875,1881,1882,1886,1890,1898,1899,1900,1905,1913,1917,1922,1928,1932,1940,1941,1943,1944,1947,1947,1948,1949,1952,1958,1961,1962,1965,1970,1971,1971,1973,1975,1982,1987,1990,2000,2005,2011,2012,2012,2019,2019,2019,2028,2031,2042,2046,2048,2053,2057,2057,2061,2062,2064,2068,2069,2074,2076,2076,2077,2085,2085,2099,2102,2104,2108,2110,2114,2118,2126,2133,2134,2139,2140,2144,2145,2148,2156,2156,2157,2161,2162,2166,2179,2179,2181,2191,2191,2191,2193,2200,2203,2205,2205,2205,2213,2213,2214,2222,2224,2237,2243,2254,2258,2260,2262,2263,2271,2275,2276,2276,2278,2280,2280,2282,2285,2290,2293,2295,2300,2305,2306,2308,2314,2317,2325,2328,2334,2334,2341,2351,2351,2357,2373,2377,2377,2377,2388,2391,2391,2392,2395,2396,2396,2400,2404,2408,2411,2413,2414,2427,2430,2437,2438,2438,2442,2442,2442,2462,2465,2472,2479,2491,2491,2491,2498,2498,2501,2503,2506,2508,2509,2514,2519,2525,2528,2529,2529,2537,2539,2542,2543,2552,2556,2567,2570,2578,2582,2586,2599,2600,2605,2608,2612,2612,2613,2616,2620,2629,2634,2638,2640,2645,2645,2653,2654,2656,2656,2657,2657,2667,2677,2684,2699,2700,2707,2711,2711,2711,2715,2716,2725,2727,2748,2753,2757,2759,2760,2768,2770,2771,2772,2781,2781,2785,2785,2791,2798,2800,2806,2814,2814,2824,2830,2830,2831,2835,2839,2840,2852,2872,2872,2882,2885,2888,2895,2898,2899,2909,2915,2917,2920,2923,2927,2927,2928,2934,2943,2944,2945,2954,2972,2980,2986,2986,2986,2995,2996,3003,3016,3018,3025,3026,3027,3030,3031,3042,3043,3048,3056,3071,3073,3074,3083,3083,3100,3109,3114,3117,3124,3130,3132,3143,3143,3145,3146,3154,3155,3157,3172,3172,3177,3185,3204,3211,3211,3212,3217,3228,3238,3242,3248,3256,3258,3259,3260,3260,3282,3286,3286,3290,3299,3301,3303,3318,3325,3325,3346,3348,3361,3361,3362,3371,3374,3385,3389,3414,3415,3417,3419,3429,3439,3446,3446,3447,3449,3449,3460,3472,3474,3475,3475,3500,3511,3517,3520,3543,3543,3550,3560,3562,3566,3574,3575,3580,3586,3587,3588,3603,3625,3631,3640,3651,3661,3661,3663,3667,3671,3678,3680,3689,3690,3701,3717,3718,3754,3762,3768,3772,3774,3781,3790,3791,3792,3798,3804,3804,3808,3819,3882,3887,3890,3893,3901,3903,3903,3905,3905,3909,3912,3918,3947,3990,3990,4004,4006,4006,4006,4016,4019,4029,4032,4040,4061,4104,4104,4105,4119,4119,4119,4120,4135,4137,4144,4162,4166,4218,4222,4233,4233,4247,4248,4251,4267,4275,4281,4290,4335,4336,4347,4361,4382,4384,4398,4404,4419,4419,4434,4449,4485,4491,4498,4513,4522,4547,4548,4548,4599,4605,4616,4635,4651,4676,4684,4730,4734,4764,4779,4785,4791,4813,4863,4892,4914,4916,4916,4920,4991,5017,5029,5045,5048,5128,5130,5148,5185,5229,5261,5286,5360,5417])
        self.assertEqual(8, aa.score_peptide(spectrum, peptide, cyclic=False))

    def test_peptide_peptide_score_multipled1(self):
        peptide = 'NNEQ'
        spectrum = Counter([0, 114, 10, 114, 432, 114])
        self.assertEqual(3, aa.score_peptide(spectrum, peptide))

    def test_leadeboard_cyclopeptide_sequencing_integers(self):
        N = 10
        spectrum = Counter([0, 71, 113, 129, 147, 200, 218, 260, 313, 331, 347, 389, 460])
        self.assertEqual(({(71, 129, 113, 147),
                           (71, 147, 113, 129),
                           (113, 129, 71, 147),
                           (113, 147, 71, 129),
                           (129, 71, 147, 113),
                           (129, 113, 147, 71),
                           (147, 71, 129, 113),
                           (147, 113, 129, 71)},
                          13),
                         aa.leaderboard_cyclopeptide_sequencing(spectrum, N, integers=True))

    def test_leadeboard_cyclopeptide_sequencing(self):
        N = 10
        spectrum = Counter([0, 71, 113, 129, 147, 200, 218, 260, 313, 331, 347, 389, 460])
        self.assertEqual(({'AEIF', 'AELF', 'AFIE', 'AFLE', 'EAFI', 'EAFL', 'EIFA', 'ELFA', 'FAEI', 'FAEL', 'FIEA',
                           'FLEA', 'IEAF', 'IFAE', 'LEAF', 'LFAE'},
                          13),
                         aa.leaderboard_cyclopeptide_sequencing(spectrum, N, integers=False))

    def test_trim_leaderboard(self):
        spectrum = Counter([0, 71, 113, 129, 147, 200, 218, 260, 313, 331, 347, 389, 460])
        leaderboard = {'A', 'S', 'AF'}
        N = 2
        self.assertEqual(({'A', 'AF'}, 4, 2), aa.trim_leaderboard(leaderboard, N, spectrum))

    def test_trim_leaderboard_tie(self):
        spectrum = Counter([0,57,57,71,87,87,87,97,99,101,101,103,103,103,113,113,113,113,113,114,114,114,115,115,128,128,128,128,128,129,129,131,137,137,147,154,156,156,160,186,186,186,188,200,201,202,204,204,208,214,215,216,217,225,225,226,229,241,241,242,242,243,243,246,250,251,252,259,259,261,265,269,275,282,285,287,291,300,314,314,315,316,316,316,317,318,323,329,329,339,346,351,353,354,356,358,361,362,363,364,372,372,374,374,380,388,388,390,396,397,398,401,403,405,416,419,422,428,428,429,443,445,447,447,455,466,467,467,471,472,477,477,477,479,484,485,485,487,489,490,498,501,501,502,502,515,516,519,525,528,533,542,556,558,558,559,568,569,576,576,578,580,580,582,585,588,599,599,602,604,605,605,605,614,614,615,615,616,622,626,626,633,643,645,653,653,655,670,672,672,681,683,697,701,702,704,706,710,713,714,714,718,719,719,719,723,727,730,736,739,740,744,751,754,762,764,768,771,781,783,784,785,790,797,800,801,801,801,810,814,815,817,818,819,833,839,841,844,847,851,851,856,858,864,865,867,868,871,874,892,893,896,898,904,905,913,914,916,918,928,930,931,940,944,951,957,961,961,964,965,968,969,969,970,973,975,978,979,999,1001,1004,1005,1005,1017,1021,1027,1030,1033,1042,1043,1044,1058,1060,1062,1065,1065,1069,1070,1072,1076,1081,1082,1083,1087,1092,1093,1098,1106,1115,1117,1120,1130,1132,1134,1151,1155,1156,1161,1168,1173,1173,1173,1174,1177,1179,1180,1182,1185,1186,1190,1195,1196,1198,1206,1209,1211,1219,1221,1230,1248,1252,1267,1269,1269,1277,1279,1279,1282,1284,1286,1286,1287,1290,1291,1294,1299,1301,1308,1320,1323,1323,1324,1324,1329,1341,1356,1359,1363,1365,1366,1377,1378,1381,1383,1390,1392,1397,1397,1399,1407,1414,1416,1421,1423,1423,1427,1432,1436,1438,1455,1460,1467,1470,1470,1477,1478,1484,1484,1491,1492,1494,1498,1515,1519,1520,1524,1527,1536,1537,1537,1545,1549,1564,1570,1572,1573,1575,1581,1583,1583,1584,1585,1585,1595,1598,1606,1607,1618,1620,1640,1650,1652,1658,1664,1670,1672,1674,1675,1675,1677,1680,1684,1686,1688,1693,1697,1698,1708,1712,1713,1731,1737,1741,1753,1776,1778,1778,1784,1784,1787,1788,1789,1795,1800,1801,1806,1806,1808,1809,1811,1812,1821,1825,1828,1844,1854,1866,1879,1881,1891,1898,1899,1900,1901,1904,1909,1912,1922,1925,1934,1935,1937,1941,1945,1949,1956,1962,1979,1981,1982,1986,1992,2003,2004,2009,2012,2013,2026,2038,2047,2050,2060,2062,2062,2065,2066,2069,2069,2074,2091,2095,2100,2105,2113,2123,2137,2141,2141,2142,2150,2152,2159,2175,2175,2178,2180,2187,2189,2194,2197,2198,2200,2228,2238,2242,2251,2255,2255,2255,2256,2274,2278,2288,2288,2291,2295,2299,2302,2306,2307,2325,2328,2356,2356,2358,2366,2369,2382,2383,2384,2386,2388,2389,2391,2401,2420,2428,2434,2435,2443,2453,2459,2459,2481,2488,2497,2497,2503,2503,2514,2514,2538,2542,2546,2547,2548,2557,2560,2563,2571,2590,2594,2602,2609,2618,2625,2628,2635,2645,2647,2651,2671,2674,2676,2676,2700,2705,2717,2722,2722,2746,2746,2749,2756,2757,2763,2774,2775,2779,2789,2804,2814,2833,2850,2853,2859,2860,2861,2864,2871,2875,2876,2877,2910,2942,2951,2960,2961,2961,2962,2974,2974,2981,2987,2990,2992,2999,3039,3073,3075,3079,3090,3096,3096,3102,3102,3105,3107,3118,3147,3153,3167,3192,3199,3201,3203,3220,3224,3233,3235,3256,3261,3276,3300,3304,3327,3332,3348,3348,3348,3357,3361,3389,3390,3419,3428,3461,3464,3476,3476,3479,3486,3518,3518,3543,3565,3575,3579,3589,3607,3614,3615,3665,3672,3678,3680,3720,3722,3743,3751,3779,3793,3825,3850,3866,3880,3906,3926,3953,3963,3965,3995,4054,4066,4094,4112,4167,4240,4241,4353,4369,4482])
        leaderboard = {'MIYFCWSQRNRDHFMNNRIVMHRCHHWLVRAALRMYKF','WICFRFVEQMCWNLLFTRTWYLREEPTCQRCKEGHKFC','LLWWIWCNFTHQMWDMECNLCDTQMKYMFKWYHMSNWN','HMMRRYQQHCWCGPLPCEFLMNVCRENHEEQYVALQIR','PTVIKPMSFPHDYDKPCLSFCKPHEPNDPLTNNFKSQV','FDVQKMRTDNLDQCWSQQAAGNCYSAANYWECEKLCGI','IRVLYLRASMLTWDYEQWDDAYNVYSKIVHFGEVVRGC','MGFKYYPNTGGPTFWRGFTYVYSEHHHHPCENHSTEQK','NQCDCDQCPQHPDLGVWPFLMEDTWQNFYISHPNEQYY','EHWASNITINCETPFNDSTMNPAFGKHSINFMGPKNQI','NKGTWFWFEKPNHADEEPQHYRQNYETAAWGDYMTALW','DPFNGHPAVRMWAVKHYEVQAWHYLYLKMRVCSMSDRY','CVWCWNPWMADYSDRTVMSNTNGFTDYAFRPVCVCWNI','YFLQAHKMNLLTVIKCICAANACNGHHKYLYFAEINPL','GQPNPILGKFAQGDLQTVAYRPFGIYLNAYAMWTQYRS','SEYRLAMGITQNNDIEDPFFKYIKRSFVMHYNCSQSKF','VLEWLRESVCKVAMALVFLCDLFDQIFPYSNLSVIDPD','RIAYPRIIWGWWTQRNKQCWPHDPKIEPDPAVPNYQES','MFMIKLDKLMYWEQCFAGWVIAFEKQGDWALDYGDVDW'}


        N = 6
        self.assertEqual(({'A', 'AF', 'F'}, 4, 2), aa.trim_leaderboard(leaderboard, N, spectrum))

    def test_get_n_for_ties_1(self):
        elems = [1, 2, 3]
        n = 2
        self.assertEqual(2, aa._get_n_for_ties(elems, n, ))

    def test_get_n_for_ties_2(self):
        elems = [1, 2, 2, 3]
        n = 2
        self.assertEqual(3, aa._get_n_for_ties(elems, n, ))

    def test_get_n_for_ties_3(self):
        elems = [1, 2, 2, 2]
        n = 2
        self.assertEqual(4, aa._get_n_for_ties(elems, n, ))

    def test_masses_to_peptide(self):
        peptide = (97, 113, 147, 128)
        expected = {'PIFK', 'PLFK', 'PIFQ', 'PLFQ'}
        self.assertEqual(expected, aa.masses_to_peptide(peptide))

    def test_spectral_convolution(self):
        spectrum = Counter([0, 137, 186, 323])
        expected = [137, 137, 186, 186, 323, 49]
        self.assertEqual(sorted(expected), sorted(aa.spectral_convolution(spectrum, 1, 500)))

    def test_spectral_convolution_filter(self):
        spectrum = Counter([0, 137, 186, 323])
        expected = [137, 137, 186, 186]
        self.assertEqual(sorted(expected), sorted(aa.spectral_convolution(spectrum, 57, 200)))

    def test_spectral_convolution_multiple(self):
        spectrum = Counter([0, 1, 1, 5, 5, 5])
        expected = [1, 1, 4, 4, 4, 4, 4, 4, 5, 5, 5]
        self.assertEqual(sorted(expected), sorted(aa.spectral_convolution(spectrum, 1, 11111111)))

    def test_leadeboard_cyclopeptide_sequencing_spectrum(self):
        N = 355
        convolute_m = 17
        spectrum = Counter(
            # [57, 57, 71, 99, 129, 137, 170, 186, 194, 208, 228, 265, 285, 299, 307, 323, 356, 364, 394, 422, 493])
            [444,1212,128,71,929,628,1299,1068,1171,101,128,1295,1284,114,299,200,1198,853,200,841,226,1070,103,283,328,826,113,354,931,1111,669,653,998,287,1172,400,344,699,1228,1012,1044,401,600,99,1115,442,770,859,973,1182,1327,954,827,812,529,57,586,528,0,1157,996,1101,330,412,1297,1054,571,458,642,1181,642,941,1099,643,883,798,341,1109,301,869,570,713,756,1398,1097,487,828,97,170,540,1057,425,1053,458,457,1295,986,1341,572,217,1214,756,499,103,858,1198,658,956,1156,1270,685,113,997,740,1285,1285,714,186,786,227,899,113,198,289,216,1270,557,684,354,870,940,1285,242,467,241,469,911,755,386,545,1200,745,586,515,699,1301,1157,345,539,241,729,402,812,940,297,1044,184,612]
        )
        self.assertEqual(({'AEIF', 'AELF', 'AFIE', 'AFLE', 'EAFI', 'EAFL', 'EIFA', 'ELFA', 'FAEI', 'FAEL', 'FIEA',
                           'FLEA', 'IEAF', 'IFAE', 'LEAF', 'LFAE'},
                          13),
                         aa.leaderboard_cyclopeptide_sequencing(spectrum, N, integers=True, convolute=convolute_m))


if __name__ == '__main__':
    unittest.main()
